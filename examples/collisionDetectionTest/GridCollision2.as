package  {	import flash.display.*;	import flash.utils.getTimer;	import jp.t2421.collision.CollisionGrid;		public class GridCollision2 extends Sprite{		private const GRID_SIZE:Number = 80;		private const RADIUS:Number = 40;		private var _balls:Vector.<DisplayObject>;				private var _numBalls:uint = 300;		private var _numChecks:uint = 0;				private var _grid:CollisionGrid;		public function GridCollision2() {			makeBalls();			//trace(_balls.length);			var startTime = getTimer();			_grid = new CollisionGrid(stage.stageWidth,stage.stageHeight,GRID_SIZE);			_grid.drawGrid(graphics);			_grid.check(_balls);						var checkObj:Vector.<DisplayObject> = _grid.checks;			//trace(checkObj.length);			//iとi+1の２つセットでループをまわす									for(var i:uint=0;i<checkObj.length;i+=2){				var ballA:Ball = checkObj[i] as Ball;				var ballB:Ball = checkObj[i+1] as Ball;				//trace(ballA);				checkCollision(ballA,ballB);			}						var elapseTime = getTimer() - startTime;			trace(elapseTime);		}				private function makeBalls():void{			_balls = new Vector.<DisplayObject>;			for(var i:int = 0;i<_numBalls;i++){				var ball:Ball = new Ball(Math.random()*RADIUS);				ball.x = Math.random()*stage.stageWidth;				ball.y = Math.random()*stage.stageHeight;				addChild(ball);				_balls.push(ball);			}		}						private function checkCollision(ballA:Ball,ballB:Ball):void{			_numChecks++;			var dx:Number = ballB.x - ballA.x;			var dy:Number = ballB.y - ballA.y;			var dist:Number = Math.sqrt(dx*dx+dy*dy);			if(dist<ballA.radius+ballB.radius){				ballA.color = 0xff0000;				ballB.color = 0xff0000;			}		}	}	}