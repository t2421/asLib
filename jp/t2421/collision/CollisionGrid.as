package jp.t2421.collision{	import flash.events.*;	import flash.display.DisplayObject;	import flash.display.Graphics;		//参考 http://www.oreilly.co.jp/books/9784873114378/	public class CollisionGrid extends EventDispatcher{		private var _checks:Vector.<DisplayObject>;		private var _grid:Vector.<Vector.<DisplayObject>>;		private var _gridSize:Number;		private var _numCells:uint;		private var _numCols:uint;		private var _numRows:uint;		private var _width:Number;		private var _height:Number;				public function CollisionGrid(width:Number,height:Number,gridSize:Number) {			_width = width;			_height = height;			_gridSize = gridSize;			_numCols = Math.ceil(_width/gridSize);			_numRows = Math.ceil(_height/gridSize);			_numCells = _numCols * _numRows;					}				public function drawGrid(g:Graphics):void{			trace(g);			g.lineStyle(0,0.5);			for(var i:int = 0;i<_width;i+=_gridSize){				g.moveTo(i,0);				g.lineTo(i,_height);							}						for(i = 0;i<_height;i+=_gridSize){				g.moveTo(0,i);				g.lineTo(_width,i);							}		}				public function check(objects:Vector.<DisplayObject>):void{			var numObjects:uint = objects.length;			_grid = new Vector.<Vector.<DisplayObject>>(_numCells);			_checks = new Vector.<DisplayObject>();						for(var i:uint=0;i<numObjects;i++){				var obj:DisplayObject = objects[i];				var index:uint = Math.floor(obj.y/_gridSize) * _numCols + Math.floor(obj.x/_gridSize)								//遅延インスタンス化				if(_grid[index] == null){					_grid[index] = new Vector.<DisplayObject>();				}								_grid[index].push(obj);			}			checkGrid();		}				private function checkGrid():void{			for(var i:uint = 0;i<_numCols;i++){				for(var j:uint = 0;j<_numRows;j++){					checkOneCell(i,j);					checkTwoCell(i,j,i+1,j);					checkTwoCell(i,j,i-1,j+1);					checkTwoCell(i,j,i,j+1);					checkTwoCell(i,j,i+1,j+1);				}			}		}				private function checkOneCell(x:int,y:int){			var index:uint = y * _numCols + x;			var cell:Vector.<DisplayObject> = _grid[index];			if(cell == null) return;			var len:uint = cell.length;						for(var i=0;i<len;i++){				var objA:DisplayObject = cell[i];				for(var j=i+1;j<len;j++){					var objB:DisplayObject = cell[j];					_checks.push(objA,objB);				}			}		}				private function checkTwoCell(x1:int,y1:int,x2:int,y2:int):void{			//セルが有効かどうかチェック			var index1:uint = y1*_numCols+x1;			var index2:uint = y2*_numCols+x2;						if(x2<0) return;			if(x2>=_numCols) return;			if(y2>=_numRows) return;						var cellA:Vector.<DisplayObject> = _grid[index1];			var cellB:Vector.<DisplayObject> = _grid[index2];			if(cellA == null || cellB == null) return;			for(var i=0;i<cellA.length;i++){				var objA:DisplayObject = cellA[i];				for(var j=0;j<cellB.length;j++){					var objB:DisplayObject = cellB[j];					_checks.push(objA,objB);									}			}		}				public function get checks():Vector.<DisplayObject>{			return _checks;		}	}	}